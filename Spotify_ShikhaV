{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Shikha0412/Spotify_ShikhaV/blob/main/Spotify_ShikhaV\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HuIHyU4_bH-Z",
        "outputId": "b1ff8ce2-dedd-4dbe-f455-9b06b4e3f0a0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "In-RMY9_eWt4"
      },
      "source": [
        "Problem statement:\n",
        "\n",
        "Given the artists file of the spotify dataset , the aim is to predict an artist's polpularity based on the other features related to them , comparing and choosing the most accurate machine learning model."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QfPK-TEofte2"
      },
      "source": [
        "# Importing libraries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Aw_OSp7nkw3G"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split # Changed skylearn to sklearn\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "from sklearn.pipeline import Pipeline # Changed skylearn to sklearn\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "import xgboost as xgb\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N-UTo7-7lMIT"
      },
      "source": [
        "# Loading Dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "trTiYvvmIjY1"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "df = pd.read_csv('/content/drive/MyDrive/shikha_verma_2024UCA1803/Database/archive (2)/artists.csv')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ieim9w64Ix2r"
      },
      "source": [
        "# Exploring the data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "O3aWeCLtI7je",
        "outputId": "532984f4-5e7a-4a81-be30-70b7d6147064"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       id  followers genres  \\\n",
              "0  0DheY5irMjBUeLybbCUEZ2        0.0     []   \n",
              "1  0DlhY15l3wsrnlfGio2bjU        5.0     []   \n",
              "2  0DmRESX2JknGPQyO15yxg7        0.0     []   \n",
              "3  0DmhnbHjm1qw6NCYPeZNgJ        0.0     []   \n",
              "4  0Dn11fWM7vHQ3rinvWEl4E        2.0     []   \n",
              "\n",
              "                                             name  popularity  \n",
              "0  Armid & Amir Zare Pashai feat. Sara Rouzbehani           0  \n",
              "1                                     ปูนา ภาวิณี           0  \n",
              "2                                           Sadaa           0  \n",
              "3                                       Tra'gruda           0  \n",
              "4                          Ioannis Panoutsopoulos           0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b21f519b-9db1-4bda-ab3d-98d497f78f1c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>followers</th>\n",
              "      <th>genres</th>\n",
              "      <th>name</th>\n",
              "      <th>popularity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0DheY5irMjBUeLybbCUEZ2</td>\n",
              "      <td>0.0</td>\n",
              "      <td>[]</td>\n",
              "      <td>Armid &amp; Amir Zare Pashai feat. Sara Rouzbehani</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0DlhY15l3wsrnlfGio2bjU</td>\n",
              "      <td>5.0</td>\n",
              "      <td>[]</td>\n",
              "      <td>ปูนา ภาวิณี</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0DmRESX2JknGPQyO15yxg7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>[]</td>\n",
              "      <td>Sadaa</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0DmhnbHjm1qw6NCYPeZNgJ</td>\n",
              "      <td>0.0</td>\n",
              "      <td>[]</td>\n",
              "      <td>Tra'gruda</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0Dn11fWM7vHQ3rinvWEl4E</td>\n",
              "      <td>2.0</td>\n",
              "      <td>[]</td>\n",
              "      <td>Ioannis Panoutsopoulos</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b21f519b-9db1-4bda-ab3d-98d497f78f1c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b21f519b-9db1-4bda-ab3d-98d497f78f1c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b21f519b-9db1-4bda-ab3d-98d497f78f1c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bba85e18-f71e-4ff5-80bc-f33d2412247c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bba85e18-f71e-4ff5-80bc-f33d2412247c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bba85e18-f71e-4ff5-80bc-f33d2412247c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WA6jxzrVJGIq",
        "outputId": "7e83c5b3-ec24-49e5-9bb2-30f57f9d0acc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1162095 entries, 0 to 1162094\n",
            "Data columns (total 5 columns):\n",
            " #   Column      Non-Null Count    Dtype  \n",
            "---  ------      --------------    -----  \n",
            " 0   id          1162095 non-null  object \n",
            " 1   followers   1162084 non-null  float64\n",
            " 2   genres      1162095 non-null  object \n",
            " 3   name        1162092 non-null  object \n",
            " 4   popularity  1162095 non-null  int64  \n",
            "dtypes: float64(1), int64(1), object(3)\n",
            "memory usage: 44.3+ MB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "xfRtd9dzJQ42",
        "outputId": "a0238ca5-887a-45de-97b6-f6196e517b59"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          followers    popularity\n",
              "count  1.162084e+06  1.162095e+06\n",
              "mean   1.022070e+04  8.795961e+00\n",
              "std    2.543995e+05  1.355777e+01\n",
              "min    0.000000e+00  0.000000e+00\n",
              "25%    1.000000e+01  0.000000e+00\n",
              "50%    5.700000e+01  2.000000e+00\n",
              "75%    4.170000e+02  1.300000e+01\n",
              "max    7.890023e+07  1.000000e+02"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-df3b9f92-1d44-4b55-8f50-96c66b96a735\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>followers</th>\n",
              "      <th>popularity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1.162084e+06</td>\n",
              "      <td>1.162095e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1.022070e+04</td>\n",
              "      <td>8.795961e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2.543995e+05</td>\n",
              "      <td>1.355777e+01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.000000e+01</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>5.700000e+01</td>\n",
              "      <td>2.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>4.170000e+02</td>\n",
              "      <td>1.300000e+01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>7.890023e+07</td>\n",
              "      <td>1.000000e+02</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-df3b9f92-1d44-4b55-8f50-96c66b96a735')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-df3b9f92-1d44-4b55-8f50-96c66b96a735 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-df3b9f92-1d44-4b55-8f50-96c66b96a735');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4f34b7ea-444c-47ce-89e7-87a32174379a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4f34b7ea-444c-47ce-89e7-87a32174379a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4f34b7ea-444c-47ce-89e7-87a32174379a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"followers\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27826247.48487669,\n        \"min\": 0.0,\n        \"max\": 78900234.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10220.703974927803,\n          57.0,\n          1162084.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"popularity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 410855.6913760432,\n        \"min\": 0.0,\n        \"max\": 1162095.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1162095.0,\n          8.795960743312724,\n          13.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VQe6Gg2-Kg6B",
        "outputId": "5a89c6d0-a03b-4bf4-ee76-e668051d41cf"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1162095, 5)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fP4Hqqd1KoMm"
      },
      "source": [
        "# Checking For and handling missing values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "GQEKfNXPK0Oy",
        "outputId": "5e71d0f9-5f91-4982-b6ec-035276eb4c44"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id             0\n",
              "followers     11\n",
              "genres         0\n",
              "name           3\n",
              "popularity     0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>followers</th>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>genres</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>name</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>popularity</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3GCj076AL_x6"
      },
      "source": [
        "Null values in columns followers and name.\n",
        "\n",
        "Replacing null values in name column with 'Unknows'.\n",
        "\n",
        "Replacing null values in followers column with mean of values in the column."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3Z0nEaxlM4Y0"
      },
      "outputs": [],
      "source": [
        "df.fillna({'name':'Unknown'},inplace=True)\n",
        "df.fillna({'followers':df['followers'].mean()},inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "z7MsLMUjNya4",
        "outputId": "1b713ed3-e70f-444b-b4b9-2e218414872b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id            0\n",
              "followers     0\n",
              "genres        0\n",
              "name          0\n",
              "popularity    0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>followers</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>genres</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>popularity</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7NgmF8U8N6P8"
      },
      "source": [
        "# EDA"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "fAUFWm5WO1CZ",
        "outputId": "63dc16ec-f120-4e21-b023-6db63f0ff3c0"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.hist(df['popularity'], bins=20 , color='red', edgecolor='yellow')\n",
        "plt.xlabel('Popularity')\n",
        "plt.ylabel('count')\n",
        "plt.title('Distribution of Popularity')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "CLJBhYAnO8pH",
        "outputId": "d1a5d7f3-2a42-406a-c9d2-adf0b8c470e9"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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1XLTTTdx00039by2vb09MkkvEjqdj/T0OuLiHKjVCopydif0cFhFRkYdOp0flUpFSkoHTqcRUGM0gsy+EkIIIXrHBRU7jz32WIRj9B0Oh5X8/BMsWvQaH344g/r6dNLT65kx40Py80/idMaRna1GrQ7R1WVjxoyt+HzjAE+0owshhBB90gUVO0uXLo10jj5DrYZdu8aQltbILbc8g6KoUKkUOjut7No1mnHjdhIMhgHYunUqU6ZsIxhMRDb9FEIIIXrHBS8qGAqFWLduXc+igkOGDOHqq69Go9FELNzFKDW1kdzcKh566Cfk5VUSF+fE6YyjoiKXe+99GLu9CVDweODQoSKGDDnKoEEdyHRzIYQQondcULFz6tQprrjiCurq6igoKABg5cqVZGVl8dZbb9G/f/+IhryYOJ0WSko2Eg6reOONqzh1qj95eZX85CePUFKyEZfLTGKiBpMJOjvjCQRi0OtTkTE7QgghRO+4oGLn9ttvp3///uzcuZOEhAQA2traWLJkCbfffjtvvfVWRENeTPx+A8eO5TNnzrtMnbqV7m4dOl03JpOXo0cLGD3aTSikxu/XER/fgV4fAEZHO7YQQgjRZ11Qc0JpaSk///nPewodgMTERB599FFKS0sjFu5ilJlZQ3NzGjNnvs3p09kYjW6ampJYuvQpmprSSE+vw+MJsHLldQwdeoSMDA1wTbRjCyGEEH3WBbXs6PV6XC7XJ8673W50Ot2XDnUxa2lJYeHCv7J48fM0NKTT1WUiL6+KjRuvQqfrwufTExdn5qGH/kRNTS6JidcAl/bPTAghhOhNF1TsXHnllfzbv/0bzz77LGPHjgXg448/5nvf+x5XX311RANebKzWdhyOBFavvoG3376C06fzyMmp4sor3+aqq14nMbEZna4brTaMSqUAE6MdWQghhOjTLqjY+c1vfsOyZcuYOHHieYsKXn311fz617+OaMCLjVYbZv36+axceQ9ebywqlUJzs52dOycQCGj59rf/QldXF1ptALU6BHyZvbiEEEII8a98oTE74XCYn/3sZ8ybN4+6ujrmz5/PX//6V1599VXKy8tZu3YtVqu1t7Ly6KOPolKpuPPOO3vO+Xw+li9fTmJiIrGxsSxatIimpqZey/CvVFf34+235+LzGcnJOUNR0SFycs6gUsG6dfNpaEjH5YonHIZwWA1sjVpW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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.scatter(df['followers'], df['popularity'], color='blue', alpha=0.5 , edgecolor='yellow')\n",
        "plt.xlabel('Followers')\n",
        "plt.ylabel('Popularity')\n",
        "plt.title('Followers vs Popularity')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Jrql8IuuPd4f"
      },
      "source": [
        "# Feature engineering\n",
        "\n",
        "Encoding using Label Encoder"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8jYkmR51PrtN"
      },
      "outputs": [],
      "source": [
        "encoder = LabelEncoder()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NnNreWVCPmYs"
      },
      "outputs": [],
      "source": [
        "df = pd.read_csv('/content/drive/MyDrive/shikha_verma_2024UCA1803/Database/archive (2)/artists.csv')\n",
        "encoder = LabelEncoder()\n",
        "df['genres_encoded'] = encoder.fit_transform(df['genres'])\n",
        "df.drop(columns=['genres'], axis = 1, inplace = True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oSDmeVhwKo14"
      },
      "outputs": [],
      "source": [
        "df['name_encoded'] = encoder.fit_transform(df['name'])\n",
        "df.drop(columns=['name'], axis = 1, inplace = True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FvYcveedK157"
      },
      "outputs": [],
      "source": [
        "df['id_encoded'] = encoder.fit_transform(df['id'])\n",
        "df.drop(columns=['id'], axis = 1, inplace = True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "enR44A0yK_kD",
        "outputId": "17a56476-e931-4296-9895-a6bc2dd033a6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "followers         0\n",
            "popularity        0\n",
            "genres_encoded    0\n",
            "name_encoded      0\n",
            "id_encoded        0\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "\n",
        "df.fillna({'followers':df['followers'].mean()},inplace=True)\n",
        "print\n",
        "print(df.isna().sum())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gx6s-E3JLGKg"
      },
      "source": [
        "# Trai-test split"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vFpKSd13LqAL"
      },
      "source": [
        "\n",
        "\n",
        "Split the dataset into 80% training and 20% testing using train_test_split() from sklearn.model_selection.\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dD6s-_znLsSd"
      },
      "outputs": [],
      "source": [
        "\n",
        "x = df.drop('popularity', axis=1)\n",
        "y = df['popularity']\n",
        "\n",
        "\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m7B1zJq1MFcB"
      },
      "source": [
        "Normalization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lyhcS7aZMKwg"
      },
      "outputs": [],
      "source": [
        "scaler=StandardScaler()\n",
        "x_train=scaler.fit_transform(x_train)\n",
        "x_test=scaler.transform(x_test)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QrCidc0WMjFU"
      },
      "source": [
        "## Comparing Different Machine learning Models"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QgeQ_Upbbpqz"
      },
      "outputs": [],
      "source": [
        "models={\"Linear Regression\": LinearRegression(),\n",
        "        \"KNN\": KNeighborsRegressor(),\n",
        "        \"Decision Tree\": DecisionTreeRegressor(),\n",
        "        \"Random Forest\": RandomForestRegressor(n_estimators=100),\n",
        "        \"XGBoost\": xgb.XGBRegressor(objective=\"reg:squarederror\", n_estimators=100)}\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vXu14vnegaCQ"
      },
      "source": [
        "Getting the accuracy of the models.\n",
        "\n",
        "Using dictionary to store the results with the models names as keys and values as nested dictionaries with keys as the repective matrics for coparison and values as the values of the matrics."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "results={}\n",
        "for (Model_name,model) in models.items():\n",
        "  model.fit(x_train,y_train)\n",
        "  y_pred=model.predict(x_test)\n",
        "  mse=mean_squared_error(y_test,y_pred)\n",
        "  r2=r2_score(y_test,y_pred)\n",
        "  results[Model_name]={\"MSE\":mse,\"R2\":r2}\n",
        "  print(f\"{Model_name} MSE: {mse}\")\n",
        "  print(f\"{Model_name} R2: {r2}\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FOrGdxn9azfx",
        "outputId": "fc49b19a-480c-4610-8beb-270c6ca0e667"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Linear Regression MSE: 151.0530653824596\n",
            "Linear Regression R2: 0.17549427384700356\n",
            "KNN MSE: 108.60556976839243\n",
            "KNN R2: 0.4071890302959291\n",
            "Decision Tree MSE: 107.10717712407333\n",
            "Decision Tree R2: 0.41536783363327656\n",
            "Random Forest MSE: 55.61983395075273\n",
            "Random Forest R2: 0.6964055548031294\n",
            "XGBoost MSE: 52.175010681152344\n",
            "XGBoost R2: 0.7152087092399597\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Creating a dataframe from results dictionary."
      ],
      "metadata": {
        "id": "P-9pB3YEoLfu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "results_df=pd.DataFrame(results).T\n",
        "results_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "hNZF-S5CokBX",
        "outputId": "14b2261a-a90f-47cb-cc4e-266f20602e37"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          MSE        R2\n",
              "Linear Regression  151.053065  0.175494\n",
              "KNN                108.605570  0.407189\n",
              "Decision Tree      107.107177  0.415368\n",
              "Random Forest       55.619834  0.696406\n",
              "XGBoost             52.175011  0.715209"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2a958de4-2f3c-49cc-ba27-f746b9d23ae0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MSE</th>\n",
              "      <th>R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Linear Regression</th>\n",
              "      <td>151.053065</td>\n",
              "      <td>0.175494</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>KNN</th>\n",
              "      <td>108.605570</td>\n",
              "      <td>0.407189</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Decision Tree</th>\n",
              "      <td>107.107177</td>\n",
              "      <td>0.415368</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Random Forest</th>\n",
              "      <td>55.619834</td>\n",
              "      <td>0.696406</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>XGBoost</th>\n",
              "      <td>52.175011</td>\n",
              "      <td>0.715209</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2a958de4-2f3c-49cc-ba27-f746b9d23ae0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2a958de4-2f3c-49cc-ba27-f746b9d23ae0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2a958de4-2f3c-49cc-ba27-f746b9d23ae0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-eb7604b0-925f-4b00-8fce-9e6e7c3b1e17\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eb7604b0-925f-4b00-8fce-9e6e7c3b1e17')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-eb7604b0-925f-4b00-8fce-9e6e7c3b1e17 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_9fc960c5-3925-441b-a822-a759b7762f65\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('results_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_9fc960c5-3925-441b-a822-a759b7762f65 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('results_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "results_df",
              "summary": "{\n  \"name\": \"results_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"MSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41.40766833921457,\n        \"min\": 52.175010681152344,\n        \"max\": 151.0530653824596,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          108.60556976839243,\n          52.175010681152344,\n          107.10717712407333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2260189751724283,\n        \"min\": 0.17549427384700356,\n        \"max\": 0.7152087092399597,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.4071890302959291,\n          0.7152087092399597,\n          0.41536783363327656\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Checking and printing best model"
      ],
      "metadata": {
        "id": "7sS6MjA7o9Oq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "best_model_name = results_df[\"R2\"].idxmax()\n",
        "best_model=models[best_model_name]\n",
        "best_model_name\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "qKPyowJfpF7l",
        "outputId": "cca04016-fac6-4c20-e9d7-08b429026404"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'XGBoost'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Visualization of $r^2$ comparison"
      ],
      "metadata": {
        "id": "fSfvDhi3qFzF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.bar(results_df.index, results_df['R2'], color='skyblue' , edgecolor= 'blue' )\n",
        "plt.title('Model R^2 Score Comparison')\n",
        "plt.xlabel('Model')\n",
        "plt.ylabel('R^2 Score')\n",
        "plt.xticks(rotation=90)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 581
        },
        "id": "Cg0wIc0RuL-I",
        "outputId": "2e82b770-f72d-4c66-dcdd-e3705625ec53"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1BFtcCnjVEqcO8lfEtJVKa46__KE6qBi_",
      "authorship_tag": "ABX9TyMwrIdN4tKl0Jb1AlRmNL6B",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}